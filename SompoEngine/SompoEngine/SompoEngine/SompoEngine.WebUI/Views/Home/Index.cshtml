
@{
    ViewData["Title"] = "Proje Notları";
}

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Proje Notları</h3>

        <div class="card-tools">
            <button type="button" class="btn btn-tool" data-card-widget="collapse" data-toggle="tooltip" title="Collapse">
                <i class="fas fa-minus"></i>
            </button>
            <button type="button" class="btn btn-tool" data-card-widget="remove" data-toggle="tooltip" title="Remove">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>
    <div class="card-body">
        <div class="callout callout-info">
            <h5>Genel Özet</h5>
            <p>1 Solution - 7 Proje</p>
            <p>MSSQL Veri Tabanı</p>
            <p>.Net Core Teknolojisi</p>
            <p>Bootstrap Alt Yapılı AdminLTE tema</p>
        </div>
        <div class="callout callout-info">
            <h5>Proje Notları</h5>
            <p>Bağlımlılıkların minimuna indirilmesi ve sonrasında genişlebilebilmesi amaçlanarak UnitOfWork yapısından faydalanılıp. Dependency resolver olarak .net core'un kendi resolver'ı tercih edilmiştir. Desing pattern olarak repository desing pattern kullanılmıştır.</p>
            <p>Thread Pool'a yüklenmemek adına metotların async kullanım ve çağrımına özen gösterilmiştir.</p>
            <p> <a href="/Home/ServiceCall"><strong> Servis Çağrımı </strong></a> sayfasında servise istekte bulunduktan sonra dönen cevaba göre sayfanın altındaki kısma async olarak veriler gelmektedir. </p>
        </div>
    </div>
    <!-- /.card-body -->
    <div class="card-footer">
         
    </div>
    <!-- /.card-footer-->
</div>
<!-- /.card -->
